AWSTemplateFormatVersion: '2010-09-09'
Description: AWS Budgets Automation - Master Account Resources

Parameters:
  SSMBudgetParameter:
    Type: String
    Default: "/BlogBudgets/CostThreshold"
    Description: "SSM Parameter Store path for budget values"
  SpokeRoleName:
    Type: String
    Default: "BlogBudgetsSpokeRole"
    Description: "Spoke account role name"

  
Resources:

  BlogBudgetsDynamoDB:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      TableName: BlogBudgetsDynamoDB
      PointInTimeRecoverySpecification:
           PointInTimeRecoveryEnabled: true
      SSESpecification:
           SSEEnabled: true
      AttributeDefinitions:
        - AttributeName: AccountId
          AttributeType: S
        - AttributeName: BudgetValue
          AttributeType: N
      KeySchema:
        - AttributeName: AccountId
          KeyType: HASH 
        - AttributeName: BudgetValue
          KeyType: RANGE 
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_IMAGE
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: "Static name used for DynamoDB Table for environments with resource name protection."


  BlogBudgetsDynamoDBTrigger:
    Type: AWS::Lambda::EventSourceMapping
    DependsOn:
      - BlogBudgetsLambdaRole
    Properties:
      EventSourceArn: !GetAtt BlogBudgetsDynamoDB.StreamArn 
      FunctionName: !GetAtt BlogBudgetsLambda.Arn
      BatchSize: 1
      StartingPosition: LATEST

  BlogBudgetsLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: BlogBudgetsLambdaRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - lambda.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
      Policies: 
        - 
          PolicyName: BlogBudgetsLambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              # Allow Lambda to read from DynamoDB Table
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:Scan
                Resource: !GetAtt BlogBudgetsDynamoDB.Arn

              # Allow Lambda to read from the DynamoDB Stream
              - Effect: Allow
                Action:
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:DescribeStream
                  - dynamodb:ListStreams
                Resource: !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/BlogBudgetsDynamoDB/stream/*"

              # Allow Lambda to update SSM Parameter in Spoke Accounts
              - Effect: Allow
                Action:
                  - ssm:PutParameter
                Resource: 
                  - !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter${SSMBudgetParameter}"

              # Allow Lambda to assume cross-account role
              - Effect: Allow
                Action: sts:AssumeRole
                Resource: !Sub 'arn:aws:iam::*:role/${SpokeRoleName}'

              #Allow Lambda to write to CloudWatch Logs
              - Sid: AllowCloudWatchLogsActions
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:CreateLogGroup'
                  - 'logs:PutLogEvents'
                Effect: Allow
                Resource: !Sub 'arn:${AWS::Partition}:logs:*:*:log-group:/aws/lambda/BlogBudgetsUpdateLambda*'    
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: "Static name used for IAM role for references."

  ## Lambda Function for Budget Updates (Reads from DynamoDB, Updates Spoke Accounts)
  BlogBudgetsLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: BlogBudgetsUpdateLambda
      Runtime: python3.12
      Role: !GetAtt BlogBudgetsLambdaRole.Arn
      Handler: index.lambda_handler
      Timeout: 10
      MemorySize: 128
      ReservedConcurrentExecutions: 10
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          import logging

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          
          dynamodb = boto3.client('dynamodb')
          ssm = boto3.client('ssm')
          sts = boto3.client('sts')

          ssm_parameter_name = os.environ['BUDGET_THRESHOLD_PARAM']
          spoke_role_name = os.environ['SPOKE_ROLE_NAME']

          def lambda_handler(event, context):
              logger.info(f'received event is: json.dumps(event)') # Log the full event

              for record in event['Records']:
                  try:
                      if record['eventName'] in ['INSERT', 'MODIFY']:
                          new_image = record['dynamodb']['NewImage']
                          account_id = new_image['AccountId']['S']

                          # Log new image to check actual key structure
                          logger.debug(f"New Image: {new_image}")

                          # Check for the actual key name in the DynamoDB stream event
                          for key in new_image.keys():
                              logger.debug(f"Detected Key: {key}")  # Log all available keys

                          # Try both key variations
                          budget_amount = (
                              new_image.get('BudgetValue', {}).get('N') or  # Expected key
                              new_image.get('Budget Value ($)', {}).get('N')  # Alternative key
                          )

                          if not budget_amount:
                              raise KeyError("Budget amount key not found in event!")

                          #Validate budget_amount is a valid numeric value, if not raise an exception
                          if not budget_amount.isdigit():
                              raise ValueError("Budget amount is not a valid numeric value!")

                          # Log the budget amount
                          logger.debug(f"Budget Amount: {budget_amount}")


                          # Assume Role in the Spoke Account
                          assumed_role = sts.assume_role(
                              RoleArn=f"arn:aws:iam::{account_id}:role/{spoke_role_name}",
                              RoleSessionName="BlogBudgetsLambdaSession"
                          )
                          credentials = assumed_role['Credentials']

                          # Create a new SSM client with assumed role credentials
                          ssm_client = boto3.client(
                              'ssm',
                              aws_access_key_id=credentials['AccessKeyId'],
                              aws_secret_access_key=credentials['SecretAccessKey'],
                              aws_session_token=credentials['SessionToken']
                          )
                          
                          # Update SSM Parameter in the spoke account
                          ssm_client.put_parameter(
                              Name=ssm_parameter_name,
                              Value=budget_amount,
                              Type='String',
                              Overwrite=True
                          )

                          logger.info(f"Successfully updated {ssm_parameter_name} with {budget_amount}")

                  except Exception as e:
                      logger.error(f"Error processing Account {account_id}: {str(e)}")

              return {'statusCode': 200, 'body': json.dumps('SSM Parameter updated')}
      Environment:
        Variables:
          BUDGET_THRESHOLD_PARAM: !Ref SSMBudgetParameter
          SPOKE_ROLE_NAME: !Ref SpokeRoleName
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "Lambda function does not require access to VPC resources."

Outputs:
  BlogBudgetsDynamoDBTable:
    Value: !Ref BlogBudgetsDynamoDB
    Export:
      Name: BlogBudgetsDynamoDBTable

  BlogBudgetsLambdaFunction:
    Value: !Ref BlogBudgetsLambda
    Export:
      Name: BlogBudgetsLambdaFunction

  BlogBudgetsLambdaRoleArn:
    Value: !GetAtt BlogBudgetsLambdaRole.Arn
    Export:
      Name: BlogBudgetsLambdaRoleArn
